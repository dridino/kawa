State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 12
-- On program shift to state 14
-- On list(var_decl) shift to state 15
## Reductions:
-- On MAIN CLASS
--   reduce production list(var_decl) ->

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
var_decl -> VAR . v_type loption(separated_nonempty_list(COMMA,IDENT)) SEMI [ WHILE VAR THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT END CLASS BOOL ]
## Transitions:
-- On T_INT shift to state 2
-- On T_BOOL shift to state 3
-- On IDENT shift to state 4
-- On v_type shift to state 5
## Reductions:

State 2:
## Known stack suffix:
## T_INT
## LR(1) items:
v_type -> T_INT . [ SEMI IDENT ]
## Transitions:
## Reductions:
-- On SEMI IDENT
--   reduce production v_type -> T_INT

State 3:
## Known stack suffix:
## T_BOOL
## LR(1) items:
v_type -> T_BOOL . [ SEMI IDENT ]
## Transitions:
## Reductions:
-- On SEMI IDENT
--   reduce production v_type -> T_BOOL

State 4:
## Known stack suffix:
## IDENT
## LR(1) items:
v_type -> IDENT . [ SEMI IDENT ]
## Transitions:
## Reductions:
-- On SEMI IDENT
--   reduce production v_type -> IDENT

State 5:
## Known stack suffix:
## VAR v_type
## LR(1) items:
var_decl -> VAR v_type . loption(separated_nonempty_list(COMMA,IDENT)) SEMI [ WHILE VAR THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT END CLASS BOOL ]
## Transitions:
-- On IDENT shift to state 6
-- On separated_nonempty_list(COMMA,IDENT) shift to state 9
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 10
## Reductions:
-- On SEMI
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) ->

State 6:
## Known stack suffix:
## IDENT
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT . [ SEMI ]
separated_nonempty_list(COMMA,IDENT) -> IDENT . COMMA separated_nonempty_list(COMMA,IDENT) [ SEMI ]
## Transitions:
-- On COMMA shift to state 7
## Reductions:
-- On SEMI
--   reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT

State 7:
## Known stack suffix:
## IDENT COMMA
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA . separated_nonempty_list(COMMA,IDENT) [ SEMI ]
## Transitions:
-- On IDENT shift to state 6
-- On separated_nonempty_list(COMMA,IDENT) shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## IDENT COMMA separated_nonempty_list(COMMA,IDENT)
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT) . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT)

State 9:
## Known stack suffix:
## separated_nonempty_list(COMMA,IDENT)
## LR(1) items:
loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT) . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT)

State 10:
## Known stack suffix:
## VAR v_type loption(separated_nonempty_list(COMMA,IDENT))
## LR(1) items:
var_decl -> VAR v_type loption(separated_nonempty_list(COMMA,IDENT)) . SEMI [ WHILE VAR THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT END CLASS BOOL ]
## Transitions:
-- On SEMI shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## VAR v_type loption(separated_nonempty_list(COMMA,IDENT)) SEMI
## LR(1) items:
var_decl -> VAR v_type loption(separated_nonempty_list(COMMA,IDENT)) SEMI . [ WHILE VAR THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT END CLASS BOOL ]
## Transitions:
## Reductions:
-- On WHILE VAR THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT END CLASS BOOL
--   reduce production var_decl -> VAR v_type loption(separated_nonempty_list(COMMA,IDENT)) SEMI

State 12:
## Known stack suffix:
## var_decl
## LR(1) items:
list(var_decl) -> var_decl . list(var_decl) [ WHILE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT END CLASS BOOL ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 12
-- On list(var_decl) shift to state 13
## Reductions:
-- On WHILE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT END CLASS BOOL
--   reduce production list(var_decl) ->

State 13:
## Known stack suffix:
## var_decl list(var_decl)
## LR(1) items:
list(var_decl) -> var_decl list(var_decl) . [ WHILE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT END CLASS BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT END CLASS BOOL
--   reduce production list(var_decl) -> var_decl list(var_decl)

State 14:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 15:
## Known stack suffix:
## list(var_decl)
## LR(1) items:
program -> list(var_decl) . list(class_def) MAIN BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On CLASS shift to state 16
-- On list(class_def) shift to state 140
-- On class_def shift to state 146
## Reductions:
-- On MAIN
--   reduce production list(class_def) ->

State 16:
## Known stack suffix:
## CLASS
## LR(1) items:
class_def -> CLASS . IDENT option(extends_bloc) BEGIN list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On IDENT shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## CLASS IDENT
## LR(1) items:
class_def -> CLASS IDENT . option(extends_bloc) BEGIN list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On EXTENDS shift to state 18
-- On option(extends_bloc) shift to state 20
-- On extends_bloc shift to state 139
## Reductions:
-- On BEGIN
--   reduce production option(extends_bloc) ->

State 18:
## Known stack suffix:
## EXTENDS
## LR(1) items:
extends_bloc -> EXTENDS . IDENT [ BEGIN ]
## Transitions:
-- On IDENT shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## EXTENDS IDENT
## LR(1) items:
extends_bloc -> EXTENDS IDENT . [ BEGIN ]
## Transitions:
## Reductions:
-- On BEGIN
--   reduce production extends_bloc -> EXTENDS IDENT

State 20:
## Known stack suffix:
## CLASS IDENT option(extends_bloc)
## LR(1) items:
class_def -> CLASS IDENT option(extends_bloc) . BEGIN list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On BEGIN shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## CLASS IDENT option(extends_bloc) BEGIN
## LR(1) items:
class_def -> CLASS IDENT option(extends_bloc) BEGIN . list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On ATTR shift to state 22
-- On list(attr_decl) shift to state 26
-- On attr_decl shift to state 137
## Reductions:
-- On METHOD END
--   reduce production list(attr_decl) ->

State 22:
## Known stack suffix:
## ATTR
## LR(1) items:
attr_decl -> ATTR . v_type loption(separated_nonempty_list(COMMA,IDENT)) SEMI [ METHOD END ATTR ]
## Transitions:
-- On T_INT shift to state 2
-- On T_BOOL shift to state 3
-- On IDENT shift to state 4
-- On v_type shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## ATTR v_type
## LR(1) items:
attr_decl -> ATTR v_type . loption(separated_nonempty_list(COMMA,IDENT)) SEMI [ METHOD END ATTR ]
## Transitions:
-- On IDENT shift to state 6
-- On separated_nonempty_list(COMMA,IDENT) shift to state 9
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 24
## Reductions:
-- On SEMI
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) ->

State 24:
## Known stack suffix:
## ATTR v_type loption(separated_nonempty_list(COMMA,IDENT))
## LR(1) items:
attr_decl -> ATTR v_type loption(separated_nonempty_list(COMMA,IDENT)) . SEMI [ METHOD END ATTR ]
## Transitions:
-- On SEMI shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## ATTR v_type loption(separated_nonempty_list(COMMA,IDENT)) SEMI
## LR(1) items:
attr_decl -> ATTR v_type loption(separated_nonempty_list(COMMA,IDENT)) SEMI . [ METHOD END ATTR ]
## Transitions:
## Reductions:
-- On METHOD END ATTR
--   reduce production attr_decl -> ATTR v_type loption(separated_nonempty_list(COMMA,IDENT)) SEMI

State 26:
## Known stack suffix:
## CLASS IDENT option(extends_bloc) BEGIN list(attr_decl)
## LR(1) items:
class_def -> CLASS IDENT option(extends_bloc) BEGIN list(attr_decl) . list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On METHOD shift to state 27
-- On method_def shift to state 133
-- On list(method_def) shift to state 135
## Reductions:
-- On END
--   reduce production list(method_def) ->

State 27:
## Known stack suffix:
## METHOD
## LR(1) items:
method_def -> METHOD . m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On VOID shift to state 28
-- On T_INT shift to state 29
-- On T_BOOL shift to state 30
-- On IDENT shift to state 31
-- On m_type shift to state 32
## Reductions:

State 28:
## Known stack suffix:
## VOID
## LR(1) items:
m_type -> VOID . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production m_type -> VOID

State 29:
## Known stack suffix:
## T_INT
## LR(1) items:
m_type -> T_INT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production m_type -> T_INT

State 30:
## Known stack suffix:
## T_BOOL
## LR(1) items:
m_type -> T_BOOL . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production m_type -> T_BOOL

State 31:
## Known stack suffix:
## IDENT
## LR(1) items:
m_type -> IDENT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production m_type -> IDENT

State 32:
## Known stack suffix:
## METHOD m_type
## LR(1) items:
method_def -> METHOD m_type . IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On IDENT shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## METHOD m_type IDENT
## LR(1) items:
method_def -> METHOD m_type IDENT . LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On LPAR shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## METHOD m_type IDENT LPAR
## LR(1) items:
method_def -> METHOD m_type IDENT LPAR . loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On T_INT shift to state 2
-- On T_BOOL shift to state 3
-- On IDENT shift to state 4
-- On v_type shift to state 35
-- On separated_nonempty_list(COMMA,param_decl) shift to state 37
-- On param_decl shift to state 38
-- On loption(separated_nonempty_list(COMMA,param_decl)) shift to state 41
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,param_decl)) ->

State 35:
## Known stack suffix:
## v_type
## LR(1) items:
param_decl -> v_type . IDENT [ RPAR COMMA ]
## Transitions:
-- On IDENT shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## v_type IDENT
## LR(1) items:
param_decl -> v_type IDENT . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production param_decl -> v_type IDENT

State 37:
## Known stack suffix:
## separated_nonempty_list(COMMA,param_decl)
## LR(1) items:
loption(separated_nonempty_list(COMMA,param_decl)) -> separated_nonempty_list(COMMA,param_decl) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,param_decl)) -> separated_nonempty_list(COMMA,param_decl)

State 38:
## Known stack suffix:
## param_decl
## LR(1) items:
separated_nonempty_list(COMMA,param_decl) -> param_decl . [ RPAR ]
separated_nonempty_list(COMMA,param_decl) -> param_decl . COMMA separated_nonempty_list(COMMA,param_decl) [ RPAR ]
## Transitions:
-- On COMMA shift to state 39
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,param_decl) -> param_decl

State 39:
## Known stack suffix:
## param_decl COMMA
## LR(1) items:
separated_nonempty_list(COMMA,param_decl) -> param_decl COMMA . separated_nonempty_list(COMMA,param_decl) [ RPAR ]
## Transitions:
-- On T_INT shift to state 2
-- On T_BOOL shift to state 3
-- On IDENT shift to state 4
-- On v_type shift to state 35
-- On separated_nonempty_list(COMMA,param_decl) shift to state 40
-- On param_decl shift to state 38
## Reductions:

State 40:
## Known stack suffix:
## param_decl COMMA separated_nonempty_list(COMMA,param_decl)
## LR(1) items:
separated_nonempty_list(COMMA,param_decl) -> param_decl COMMA separated_nonempty_list(COMMA,param_decl) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,param_decl) -> param_decl COMMA separated_nonempty_list(COMMA,param_decl)

State 41:
## Known stack suffix:
## METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl))
## LR(1) items:
method_def -> METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) . RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On RPAR shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR
## LR(1) items:
method_def -> METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR . BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On BEGIN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN
## LR(1) items:
method_def -> METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN . list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 12
-- On list(var_decl) shift to state 44
## Reductions:
-- On WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production list(var_decl) ->

State 44:
## Known stack suffix:
## METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl)
## LR(1) items:
method_def -> METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) . list(instruction) END [ METHOD END ]
## Transitions:
-- On WHILE shift to state 45
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On RETURN shift to state 102
-- On PRINT shift to state 105
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IF shift to state 110
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 115
-- On list(instruction) shift to state 131
-- On instruction shift to state 125
-- On expression shift to state 127
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 45:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . LPAR expression RPAR BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On LPAR shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## WHILE LPAR
## LR(1) items:
instruction -> WHILE LPAR . expression RPAR BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 99
## Reductions:

State 47:
## Known stack suffix:
## THIS
## LR(1) items:
expression -> THIS . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD
--   reduce production expression -> THIS

State 48:
## Known stack suffix:
## SUB
## LR(1) items:
unop -> SUB . [ THIS SUB NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS SUB NOT NEW LPAR INT IDENT BOOL
--   reduce production unop -> SUB

State 49:
## Known stack suffix:
## NOT
## LR(1) items:
unop -> NOT . [ THIS SUB NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS SUB NOT NEW LPAR INT IDENT BOOL
--   reduce production unop -> NOT

State 50:
## Known stack suffix:
## NEW
## LR(1) items:
expression -> NEW . IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> NEW . IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On IDENT shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
expression -> NEW IDENT . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> NEW IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On LPAR shift to state 52
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD
--   reduce production expression -> NEW IDENT

State 52:
## Known stack suffix:
## NEW IDENT LPAR
## LR(1) items:
expression -> NEW IDENT LPAR . loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On separated_nonempty_list(COMMA,expression) shift to state 63
-- On mem shift to state 58
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 97
-- On expression shift to state 66
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 53:
## Known stack suffix:
## LPAR
## LR(1) items:
expression -> LPAR . expression RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 95
## Reductions:

State 54:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD
--   reduce production expression -> INT

State 55:
## Known stack suffix:
## IDENT
## LR(1) items:
mem -> IDENT . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV COMMA AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV COMMA AND ADD
--   reduce production mem -> IDENT

State 56:
## Known stack suffix:
## BOOL
## LR(1) items:
expression -> BOOL . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD
--   reduce production expression -> BOOL

State 57:
## Known stack suffix:
## unop
## LR(1) items:
expression -> unop . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 59
## Reductions:

State 58:
## Known stack suffix:
## mem
## LR(1) items:
expression -> mem . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD
--   reduce production expression -> mem

State 59:
## Known stack suffix:
## unop expression
## LR(1) items:
expression -> unop expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On DOT shift to state 60
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DIV COMMA AND ADD
--   reduce production expression -> unop expression

State 60:
## Known stack suffix:
## expression DOT
## LR(1) items:
expression -> expression DOT . IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression DOT . IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On IDENT shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## expression DOT IDENT
## LR(1) items:
expression -> expression DOT IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression DOT IDENT . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On LPAR shift to state 62
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV COMMA AND ADD
--   reduce production mem -> expression DOT IDENT

State 62:
## Known stack suffix:
## expression DOT IDENT LPAR
## LR(1) items:
expression -> expression DOT IDENT LPAR . loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On separated_nonempty_list(COMMA,expression) shift to state 63
-- On mem shift to state 58
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 64
-- On expression shift to state 66
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 63:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 64:
## Known stack suffix:
## expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
expression -> expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) . RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On RPAR shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR
## LR(1) items:
expression -> expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD
--   reduce production expression -> expression DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR

State 66:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAR ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAR ]
## Transitions:
-- On SUB shift to state 67
-- On REM shift to state 69
-- On OR shift to state 75
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On COMMA shift to state 91
-- On AND shift to state 93
-- On ADD shift to state 81
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 67:
## Known stack suffix:
## expression SUB
## LR(1) items:
expression -> expression SUB . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expression SUB expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression SUB expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On REM shift to state 69
-- On MUL shift to state 71
-- On DOT shift to state 60
-- On DIV shift to state 73
## Reductions:
-- On SUB SEMI RPAR OR NEQ LT LE GT GE EQ COMMA AND ADD
--   reduce production expression -> expression SUB expression

State 69:
## Known stack suffix:
## expression REM
## LR(1) items:
expression -> expression REM . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## expression REM expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression REM expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On MUL shift to state 71
-- On DOT shift to state 60
-- On DIV shift to state 73
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ LT LE GT GE EQ COMMA AND ADD
--   reduce production expression -> expression REM expression

State 71:
## Known stack suffix:
## expression MUL
## LR(1) items:
expression -> expression MUL . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## expression MUL expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression MUL expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On DOT shift to state 60
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DIV COMMA AND ADD
--   reduce production expression -> expression MUL expression

State 73:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression DIV expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On DOT shift to state 60
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DIV COMMA AND ADD
--   reduce production expression -> expression DIV expression

State 75:
## Known stack suffix:
## expression OR
## LR(1) items:
expression -> expression OR . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## expression OR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression OR expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On REM shift to state 69
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On ADD shift to state 81
## Reductions:
-- On SEMI RPAR OR COMMA AND
--   reduce production expression -> expression OR expression

State 77:
## Known stack suffix:
## expression NEQ
## LR(1) items:
expression -> expression NEQ . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## expression NEQ expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression NEQ expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On REM shift to state 69
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On ADD shift to state 81
## Reductions:
-- On SEMI RPAR OR NEQ EQ COMMA AND
--   reduce production expression -> expression NEQ expression

State 79:
## Known stack suffix:
## expression LT
## LR(1) items:
expression -> expression LT . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## expression LT expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression LT expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On REM shift to state 69
-- On MUL shift to state 71
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On ADD shift to state 81
## Reductions:
-- On SEMI RPAR OR NEQ LT LE GT GE EQ COMMA AND
--   reduce production expression -> expression LT expression

State 81:
## Known stack suffix:
## expression ADD
## LR(1) items:
expression -> expression ADD . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## expression ADD expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression ADD expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On REM shift to state 69
-- On MUL shift to state 71
-- On DOT shift to state 60
-- On DIV shift to state 73
## Reductions:
-- On SUB SEMI RPAR OR NEQ LT LE GT GE EQ COMMA AND ADD
--   reduce production expression -> expression ADD expression

State 83:
## Known stack suffix:
## expression LE
## LR(1) items:
expression -> expression LE . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## expression LE expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression LE expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On REM shift to state 69
-- On MUL shift to state 71
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On ADD shift to state 81
## Reductions:
-- On SEMI RPAR OR NEQ LT LE GT GE EQ COMMA AND
--   reduce production expression -> expression LE expression

State 85:
## Known stack suffix:
## expression GT
## LR(1) items:
expression -> expression GT . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## expression GT expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression GT expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On REM shift to state 69
-- On MUL shift to state 71
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On ADD shift to state 81
## Reductions:
-- On SEMI RPAR OR NEQ LT LE GT GE EQ COMMA AND
--   reduce production expression -> expression GT expression

State 87:
## Known stack suffix:
## expression GE
## LR(1) items:
expression -> expression GE . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## expression GE expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression GE expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On REM shift to state 69
-- On MUL shift to state 71
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On ADD shift to state 81
## Reductions:
-- On SEMI RPAR OR NEQ LT LE GT GE EQ COMMA AND
--   reduce production expression -> expression GE expression

State 89:
## Known stack suffix:
## expression EQ
## LR(1) items:
expression -> expression EQ . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## expression EQ expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression EQ expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On REM shift to state 69
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On ADD shift to state 81
## Reductions:
-- On SEMI RPAR OR NEQ EQ COMMA AND
--   reduce production expression -> expression EQ expression

State 91:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAR ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On separated_nonempty_list(COMMA,expression) shift to state 92
-- On mem shift to state 58
-- On expression shift to state 66
## Reductions:

State 92:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 93:
## Known stack suffix:
## expression AND
## LR(1) items:
expression -> expression AND . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## expression AND expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression AND expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On REM shift to state 69
-- On OR shift to state 75
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On ADD shift to state 81
## Reductions:
-- On SEMI RPAR COMMA AND
--   reduce production expression -> expression AND expression

State 95:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> LPAR expression . RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On RPAR shift to state 96
-- On REM shift to state 69
-- On OR shift to state 75
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On AND shift to state 93
-- On ADD shift to state 81
## Reductions:

State 96:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
expression -> LPAR expression RPAR . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD
--   reduce production expression -> LPAR expression RPAR

State 97:
## Known stack suffix:
## NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
expression -> NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) . RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
-- On RPAR shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR
## LR(1) items:
expression -> NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV COMMA AND ADD
--   reduce production expression -> NEW IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR

State 99:
## Known stack suffix:
## WHILE LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> WHILE LPAR expression . RPAR BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On RPAR shift to state 100
-- On REM shift to state 69
-- On OR shift to state 75
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On AND shift to state 93
-- On ADD shift to state 81
## Reductions:

State 100:
## Known stack suffix:
## WHILE LPAR expression RPAR
## LR(1) items:
instruction -> WHILE LPAR expression RPAR . BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On BEGIN shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN . list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On WHILE shift to state 45
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On RETURN shift to state 102
-- On PRINT shift to state 105
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IF shift to state 110
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 115
-- On list(instruction) shift to state 129
-- On instruction shift to state 125
-- On expression shift to state 127
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 102:
## Known stack suffix:
## RETURN
## LR(1) items:
instruction -> RETURN . expression SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## RETURN expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> RETURN expression . SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On SEMI shift to state 104
-- On REM shift to state 69
-- On OR shift to state 75
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On AND shift to state 93
-- On ADD shift to state 81
## Reductions:

State 104:
## Known stack suffix:
## RETURN expression SEMI
## LR(1) items:
instruction -> RETURN expression SEMI . [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> RETURN expression SEMI

State 105:
## Known stack suffix:
## PRINT
## LR(1) items:
instruction -> PRINT . LPAR expression RPAR SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On LPAR shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## PRINT LPAR
## LR(1) items:
instruction -> PRINT LPAR . expression RPAR SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## PRINT LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> PRINT LPAR expression . RPAR SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On RPAR shift to state 108
-- On REM shift to state 69
-- On OR shift to state 75
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On AND shift to state 93
-- On ADD shift to state 81
## Reductions:

State 108:
## Known stack suffix:
## PRINT LPAR expression RPAR
## LR(1) items:
instruction -> PRINT LPAR expression RPAR . SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On SEMI shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## PRINT LPAR expression RPAR SEMI
## LR(1) items:
instruction -> PRINT LPAR expression RPAR SEMI . [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> PRINT LPAR expression RPAR SEMI

State 110:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On LPAR shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## IF LPAR
## LR(1) items:
instruction -> IF LPAR . expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## IF LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> IF LPAR expression . RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On RPAR shift to state 113
-- On REM shift to state 69
-- On OR shift to state 75
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On AND shift to state 93
-- On ADD shift to state 81
## Reductions:

State 113:
## Known stack suffix:
## IF LPAR expression RPAR
## LR(1) items:
instruction -> IF LPAR expression RPAR . BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On BEGIN shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN . list(instruction) END ELSE BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On WHILE shift to state 45
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On RETURN shift to state 102
-- On PRINT shift to state 105
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IF shift to state 110
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 115
-- On list(instruction) shift to state 119
-- On instruction shift to state 125
-- On expression shift to state 127
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 115:
## Known stack suffix:
## mem
## LR(1) items:
expression -> mem . [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> mem . EQUAL expression SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On EQUAL shift to state 116
## Reductions:
-- On SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD
--   reduce production expression -> mem

State 116:
## Known stack suffix:
## mem EQUAL
## LR(1) items:
instruction -> mem EQUAL . expression SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 58
-- On expression shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## mem EQUAL expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> mem EQUAL expression . SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On SEMI shift to state 118
-- On REM shift to state 69
-- On OR shift to state 75
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On AND shift to state 93
-- On ADD shift to state 81
## Reductions:

State 118:
## Known stack suffix:
## mem EQUAL expression SEMI
## LR(1) items:
instruction -> mem EQUAL expression SEMI . [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> mem EQUAL expression SEMI

State 119:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) . END ELSE BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On END shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END . ELSE BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On ELSE shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE . BEGIN list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On BEGIN shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN . list(instruction) END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On WHILE shift to state 45
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On RETURN shift to state 102
-- On PRINT shift to state 105
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IF shift to state 110
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 115
-- On list(instruction) shift to state 123
-- On instruction shift to state 125
-- On expression shift to state 127
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 123:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) . END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On END shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END . [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END

State 125:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ END ]
## Transitions:
-- On WHILE shift to state 45
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On RETURN shift to state 102
-- On PRINT shift to state 105
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IF shift to state 110
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 115
-- On list(instruction) shift to state 126
-- On instruction shift to state 125
-- On expression shift to state 127
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 126:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(instruction) -> instruction list(instruction)

State 127:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> expression . SEMI [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 67
-- On SEMI shift to state 128
-- On REM shift to state 69
-- On OR shift to state 75
-- On NEQ shift to state 77
-- On MUL shift to state 71
-- On LT shift to state 79
-- On LE shift to state 83
-- On GT shift to state 85
-- On GE shift to state 87
-- On EQ shift to state 89
-- On DOT shift to state 60
-- On DIV shift to state 73
-- On AND shift to state 93
-- On ADD shift to state 81
## Reductions:

State 128:
## Known stack suffix:
## expression SEMI
## LR(1) items:
instruction -> expression SEMI . [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> expression SEMI

State 129:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) . END [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On END shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END . [ WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END

State 131:
## Known stack suffix:
## METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction)
## LR(1) items:
method_def -> METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) . END [ METHOD END ]
## Transitions:
-- On END shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END
## LR(1) items:
method_def -> METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production method_def -> METHOD m_type IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END

State 133:
## Known stack suffix:
## method_def
## LR(1) items:
list(method_def) -> method_def . list(method_def) [ END ]
## Transitions:
-- On METHOD shift to state 27
-- On method_def shift to state 133
-- On list(method_def) shift to state 134
## Reductions:
-- On END
--   reduce production list(method_def) ->

State 134:
## Known stack suffix:
## method_def list(method_def)
## LR(1) items:
list(method_def) -> method_def list(method_def) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(method_def) -> method_def list(method_def)

State 135:
## Known stack suffix:
## CLASS IDENT option(extends_bloc) BEGIN list(attr_decl) list(method_def)
## LR(1) items:
class_def -> CLASS IDENT option(extends_bloc) BEGIN list(attr_decl) list(method_def) . END [ MAIN CLASS ]
## Transitions:
-- On END shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## CLASS IDENT option(extends_bloc) BEGIN list(attr_decl) list(method_def) END
## LR(1) items:
class_def -> CLASS IDENT option(extends_bloc) BEGIN list(attr_decl) list(method_def) END . [ MAIN CLASS ]
## Transitions:
## Reductions:
-- On MAIN CLASS
--   reduce production class_def -> CLASS IDENT option(extends_bloc) BEGIN list(attr_decl) list(method_def) END

State 137:
## Known stack suffix:
## attr_decl
## LR(1) items:
list(attr_decl) -> attr_decl . list(attr_decl) [ METHOD END ]
## Transitions:
-- On ATTR shift to state 22
-- On list(attr_decl) shift to state 138
-- On attr_decl shift to state 137
## Reductions:
-- On METHOD END
--   reduce production list(attr_decl) ->

State 138:
## Known stack suffix:
## attr_decl list(attr_decl)
## LR(1) items:
list(attr_decl) -> attr_decl list(attr_decl) . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production list(attr_decl) -> attr_decl list(attr_decl)

State 139:
## Known stack suffix:
## extends_bloc
## LR(1) items:
option(extends_bloc) -> extends_bloc . [ BEGIN ]
## Transitions:
## Reductions:
-- On BEGIN
--   reduce production option(extends_bloc) -> extends_bloc

State 140:
## Known stack suffix:
## list(var_decl) list(class_def)
## LR(1) items:
program -> list(var_decl) list(class_def) . MAIN BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On MAIN shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN . BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On BEGIN shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN . list(instruction) END EOF [ # ]
## Transitions:
-- On WHILE shift to state 45
-- On THIS shift to state 47
-- On SUB shift to state 48
-- On RETURN shift to state 102
-- On PRINT shift to state 105
-- On NOT shift to state 49
-- On NEW shift to state 50
-- On LPAR shift to state 53
-- On INT shift to state 54
-- On IF shift to state 110
-- On IDENT shift to state 55
-- On BOOL shift to state 56
-- On unop shift to state 57
-- On mem shift to state 115
-- On list(instruction) shift to state 143
-- On instruction shift to state 125
-- On expression shift to state 127
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 143:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instruction)
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) . END EOF [ # ]
## Transitions:
-- On END shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instruction) END
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) END . EOF [ # ]
## Transitions:
-- On EOF shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instruction) END EOF
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) END EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) END EOF

State 146:
## Known stack suffix:
## class_def
## LR(1) items:
list(class_def) -> class_def . list(class_def) [ MAIN ]
## Transitions:
-- On CLASS shift to state 16
-- On list(class_def) shift to state 147
-- On class_def shift to state 146
## Reductions:
-- On MAIN
--   reduce production list(class_def) ->

State 147:
## Known stack suffix:
## class_def list(class_def)
## LR(1) items:
list(class_def) -> class_def list(class_def) . [ MAIN ]
## Transitions:
## Reductions:
-- On MAIN
--   reduce production list(class_def) -> class_def list(class_def)

