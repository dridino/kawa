State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On MAIN shift to state 1
-- On program shift to state 48
## Reductions:

State 1:
## Known stack suffix:
## MAIN
## LR(1) items:
program -> MAIN . BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On BEGIN shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## MAIN BEGIN
## LR(1) items:
program -> MAIN BEGIN . list(instruction) END EOF [ # ]
## Transitions:
-- On THIS shift to state 3
-- On PRINT shift to state 4
-- On OPP shift to state 6
-- On NOT shift to state 7
-- On NEW shift to state 8
-- On LPAR shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On BOOL shift to state 13
-- On unop shift to state 14
-- On mem_access shift to state 39
-- On list(instruction) shift to state 42
-- On instruction shift to state 45
-- On expression shift to state 47
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 3:
## Known stack suffix:
## THIS
## LR(1) items:
expression -> THIS . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD
--   reduce production expression -> THIS

State 4:
## Known stack suffix:
## PRINT
## LR(1) items:
instruction -> PRINT . LPAR expression RPAR SEMI [ THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL ]
## Transitions:
-- On LPAR shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## PRINT LPAR
## LR(1) items:
instruction -> PRINT LPAR . expression RPAR SEMI [ THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL ]
## Transitions:
-- On THIS shift to state 3
-- On OPP shift to state 6
-- On NOT shift to state 7
-- On NEW shift to state 8
-- On LPAR shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On BOOL shift to state 13
-- On unop shift to state 14
-- On mem_access shift to state 15
-- On expression shift to state 36
## Reductions:

State 6:
## Known stack suffix:
## OPP
## LR(1) items:
unop -> OPP . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production unop -> OPP

State 7:
## Known stack suffix:
## NOT
## LR(1) items:
unop -> NOT . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production unop -> NOT

State 8:
## Known stack suffix:
## NEW
## LR(1) items:
expression -> NEW . IDENT [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
-- On IDENT shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
expression -> NEW IDENT . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD
--   reduce production expression -> NEW IDENT

State 10:
## Known stack suffix:
## LPAR
## LR(1) items:
expression -> LPAR . expression RPAR [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
-- On THIS shift to state 3
-- On OPP shift to state 6
-- On NOT shift to state 7
-- On NEW shift to state 8
-- On LPAR shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On BOOL shift to state 13
-- On unop shift to state 14
-- On mem_access shift to state 15
-- On expression shift to state 34
## Reductions:

State 11:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD
--   reduce production expression -> INT

State 12:
## Known stack suffix:
## IDENT
## LR(1) items:
mem_access -> IDENT . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQUAL EQ END DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQUAL EQ END DIV BOOL AND ADD
--   reduce production mem_access -> IDENT

State 13:
## Known stack suffix:
## BOOL
## LR(1) items:
expression -> BOOL . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD
--   reduce production expression -> BOOL

State 14:
## Known stack suffix:
## unop
## LR(1) items:
expression -> unop . expression [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
-- On THIS shift to state 3
-- On OPP shift to state 6
-- On NOT shift to state 7
-- On NEW shift to state 8
-- On LPAR shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On BOOL shift to state 13
-- On unop shift to state 14
-- On mem_access shift to state 15
-- On expression shift to state 16
## Reductions:

State 15:
## Known stack suffix:
## mem_access
## LR(1) items:
expression -> mem_access . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD
--   reduce production expression -> mem_access

State 16:
## Known stack suffix:
## unop expression
## LR(1) items:
expression -> unop expression . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
expression -> expression . binop expression [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
mem_access -> expression . POINT IDENT [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
-- On SUB shift to state 17
-- On REM shift to state 18
-- On POINT shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 22
-- On MUL shift to state 23
-- On LT shift to state 24
-- On LE shift to state 25
-- On GT shift to state 26
-- On GE shift to state 27
-- On EQ shift to state 28
-- On DIV shift to state 29
-- On AND shift to state 30
-- On ADD shift to state 31
-- On binop shift to state 32
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD
--   reduce production expression -> unop expression
** Conflict on SUB REM POINT OR NEQ MUL LT LE GT GE EQ DIV AND ADD

State 17:
## Known stack suffix:
## SUB
## LR(1) items:
binop -> SUB . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> SUB

State 18:
## Known stack suffix:
## REM
## LR(1) items:
binop -> REM . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> REM

State 19:
## Known stack suffix:
## expression POINT
## LR(1) items:
mem_access -> expression POINT . IDENT [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQUAL EQ END DIV BOOL AND ADD ]
## Transitions:
-- On IDENT shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## expression POINT IDENT
## LR(1) items:
mem_access -> expression POINT IDENT . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQUAL EQ END DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQUAL EQ END DIV BOOL AND ADD
--   reduce production mem_access -> expression POINT IDENT

State 21:
## Known stack suffix:
## OR
## LR(1) items:
binop -> OR . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> OR

State 22:
## Known stack suffix:
## NEQ
## LR(1) items:
binop -> NEQ . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> NEQ

State 23:
## Known stack suffix:
## MUL
## LR(1) items:
binop -> MUL . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> MUL

State 24:
## Known stack suffix:
## LT
## LR(1) items:
binop -> LT . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> LT

State 25:
## Known stack suffix:
## LE
## LR(1) items:
binop -> LE . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> LE

State 26:
## Known stack suffix:
## GT
## LR(1) items:
binop -> GT . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> GT

State 27:
## Known stack suffix:
## GE
## LR(1) items:
binop -> GE . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> GE

State 28:
## Known stack suffix:
## EQ
## LR(1) items:
binop -> EQ . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> EQ

State 29:
## Known stack suffix:
## DIV
## LR(1) items:
binop -> DIV . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> DIV

State 30:
## Known stack suffix:
## AND
## LR(1) items:
binop -> AND . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> AND

State 31:
## Known stack suffix:
## ADD
## LR(1) items:
binop -> ADD . [ THIS OPP NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On THIS OPP NOT NEW LPAR INT IDENT BOOL
--   reduce production binop -> ADD

State 32:
## Known stack suffix:
## expression binop
## LR(1) items:
expression -> expression binop . expression [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
-- On THIS shift to state 3
-- On OPP shift to state 6
-- On NOT shift to state 7
-- On NEW shift to state 8
-- On LPAR shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On BOOL shift to state 13
-- On unop shift to state 14
-- On mem_access shift to state 15
-- On expression shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## expression binop expression
## LR(1) items:
expression -> expression . binop expression [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
expression -> expression binop expression . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
mem_access -> expression . POINT IDENT [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
-- On SUB shift to state 17
-- On REM shift to state 18
-- On POINT shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 22
-- On MUL shift to state 23
-- On LT shift to state 24
-- On LE shift to state 25
-- On GT shift to state 26
-- On GE shift to state 27
-- On EQ shift to state 28
-- On DIV shift to state 29
-- On AND shift to state 30
-- On ADD shift to state 31
-- On binop shift to state 32
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD
--   reduce production expression -> expression binop expression
** Conflict on SUB REM POINT OR NEQ MUL LT LE GT GE EQ DIV AND ADD

State 34:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> expression . binop expression [ SUB RPAR REM POINT OR NEQ MUL LT LE GT GE EQ DIV AND ADD ]
expression -> LPAR expression . RPAR [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
mem_access -> expression . POINT IDENT [ SUB RPAR REM POINT OR NEQ MUL LT LE GT GE EQ DIV AND ADD ]
## Transitions:
-- On SUB shift to state 17
-- On RPAR shift to state 35
-- On REM shift to state 18
-- On POINT shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 22
-- On MUL shift to state 23
-- On LT shift to state 24
-- On LE shift to state 25
-- On GT shift to state 26
-- On GE shift to state 27
-- On EQ shift to state 28
-- On DIV shift to state 29
-- On AND shift to state 30
-- On ADD shift to state 31
-- On binop shift to state 32
## Reductions:

State 35:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
expression -> LPAR expression RPAR . [ THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
## Reductions:
-- On THIS SUB RPAR REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD
--   reduce production expression -> LPAR expression RPAR

State 36:
## Known stack suffix:
## PRINT LPAR expression
## LR(1) items:
expression -> expression . binop expression [ SUB RPAR REM POINT OR NEQ MUL LT LE GT GE EQ DIV AND ADD ]
instruction -> PRINT LPAR expression . RPAR SEMI [ THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL ]
mem_access -> expression . POINT IDENT [ SUB RPAR REM POINT OR NEQ MUL LT LE GT GE EQ DIV AND ADD ]
## Transitions:
-- On SUB shift to state 17
-- On RPAR shift to state 37
-- On REM shift to state 18
-- On POINT shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 22
-- On MUL shift to state 23
-- On LT shift to state 24
-- On LE shift to state 25
-- On GT shift to state 26
-- On GE shift to state 27
-- On EQ shift to state 28
-- On DIV shift to state 29
-- On AND shift to state 30
-- On ADD shift to state 31
-- On binop shift to state 32
## Reductions:

State 37:
## Known stack suffix:
## PRINT LPAR expression RPAR
## LR(1) items:
instruction -> PRINT LPAR expression RPAR . SEMI [ THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL ]
## Transitions:
-- On SEMI shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## PRINT LPAR expression RPAR SEMI
## LR(1) items:
instruction -> PRINT LPAR expression RPAR SEMI . [ THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL ]
## Transitions:
## Reductions:
-- On THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL
--   reduce production instruction -> PRINT LPAR expression RPAR SEMI

State 39:
## Known stack suffix:
## mem_access
## LR(1) items:
expression -> mem_access . [ SUB REM POINT OR NEQ MUL LT LE GT GE EQ DIV AND ADD ]
instruction -> mem_access . EQUAL expression [ THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL ]
## Transitions:
-- On EQUAL shift to state 40
## Reductions:
-- On SUB REM POINT OR NEQ MUL LT LE GT GE EQ DIV AND ADD
--   reduce production expression -> mem_access

State 40:
## Known stack suffix:
## mem_access EQUAL
## LR(1) items:
instruction -> mem_access EQUAL . expression [ THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL ]
## Transitions:
-- On THIS shift to state 3
-- On OPP shift to state 6
-- On NOT shift to state 7
-- On NEW shift to state 8
-- On LPAR shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On BOOL shift to state 13
-- On unop shift to state 14
-- On mem_access shift to state 15
-- On expression shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## mem_access EQUAL expression
## LR(1) items:
expression -> expression . binop expression [ THIS SUB REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
instruction -> mem_access EQUAL expression . [ THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL ]
mem_access -> expression . POINT IDENT [ THIS SUB REM PRINT POINT OR OPP NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE EQ END DIV BOOL AND ADD ]
## Transitions:
-- On SUB shift to state 17
-- On REM shift to state 18
-- On POINT shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 22
-- On MUL shift to state 23
-- On LT shift to state 24
-- On LE shift to state 25
-- On GT shift to state 26
-- On GE shift to state 27
-- On EQ shift to state 28
-- On DIV shift to state 29
-- On AND shift to state 30
-- On ADD shift to state 31
-- On binop shift to state 32
## Reductions:
-- On THIS PRINT OPP NOT NEW LPAR INT IDENT END BOOL
--   reduce production instruction -> mem_access EQUAL expression

State 42:
## Known stack suffix:
## MAIN BEGIN list(instruction)
## LR(1) items:
program -> MAIN BEGIN list(instruction) . END EOF [ # ]
## Transitions:
-- On END shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## MAIN BEGIN list(instruction) END
## LR(1) items:
program -> MAIN BEGIN list(instruction) END . EOF [ # ]
## Transitions:
-- On EOF shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## MAIN BEGIN list(instruction) END EOF
## LR(1) items:
program -> MAIN BEGIN list(instruction) END EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> MAIN BEGIN list(instruction) END EOF

State 45:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ END ]
## Transitions:
-- On THIS shift to state 3
-- On PRINT shift to state 4
-- On OPP shift to state 6
-- On NOT shift to state 7
-- On NEW shift to state 8
-- On LPAR shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On BOOL shift to state 13
-- On unop shift to state 14
-- On mem_access shift to state 39
-- On list(instruction) shift to state 46
-- On instruction shift to state 45
-- On expression shift to state 47
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 46:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(instruction) -> instruction list(instruction)

State 47:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . binop expression [ SUB REM POINT OR NEQ MUL LT LE GT GE EQ DIV AND ADD ]
mem_access -> expression . POINT IDENT [ SUB REM POINT OR NEQ MUL LT LE GT GE EQUAL EQ DIV AND ADD ]
## Transitions:
-- On SUB shift to state 17
-- On REM shift to state 18
-- On POINT shift to state 19
-- On OR shift to state 21
-- On NEQ shift to state 22
-- On MUL shift to state 23
-- On LT shift to state 24
-- On LE shift to state 25
-- On GT shift to state 26
-- On GE shift to state 27
-- On EQ shift to state 28
-- On DIV shift to state 29
-- On AND shift to state 30
-- On ADD shift to state 31
-- On binop shift to state 32
## Reductions:

State 48:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

