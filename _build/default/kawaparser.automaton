State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 8
-- On program shift to state 10
-- On list(var_decl) shift to state 11
## Reductions:
-- On MAIN CLASS
--   reduce production list(var_decl) ->

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
var_decl -> VAR . v_type IDENT SEMI [ VAR MAIN CLASS ]
## Transitions:
-- On T_INT shift to state 2
-- On T_BOOL shift to state 3
-- On IDENT shift to state 4
-- On v_type shift to state 5
## Reductions:

State 2:
## Known stack suffix:
## T_INT
## LR(1) items:
v_type -> T_INT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production v_type -> T_INT

State 3:
## Known stack suffix:
## T_BOOL
## LR(1) items:
v_type -> T_BOOL . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production v_type -> T_BOOL

State 4:
## Known stack suffix:
## IDENT
## LR(1) items:
v_type -> IDENT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production v_type -> IDENT

State 5:
## Known stack suffix:
## VAR v_type
## LR(1) items:
var_decl -> VAR v_type . IDENT SEMI [ VAR MAIN CLASS ]
## Transitions:
-- On IDENT shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## VAR v_type IDENT
## LR(1) items:
var_decl -> VAR v_type IDENT . SEMI [ VAR MAIN CLASS ]
## Transitions:
-- On SEMI shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## VAR v_type IDENT SEMI
## LR(1) items:
var_decl -> VAR v_type IDENT SEMI . [ VAR MAIN CLASS ]
## Transitions:
## Reductions:
-- On VAR MAIN CLASS
--   reduce production var_decl -> VAR v_type IDENT SEMI

State 8:
## Known stack suffix:
## var_decl
## LR(1) items:
list(var_decl) -> var_decl . list(var_decl) [ MAIN CLASS ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 8
-- On list(var_decl) shift to state 9
## Reductions:
-- On MAIN CLASS
--   reduce production list(var_decl) ->

State 9:
## Known stack suffix:
## var_decl list(var_decl)
## LR(1) items:
list(var_decl) -> var_decl list(var_decl) . [ MAIN CLASS ]
## Transitions:
## Reductions:
-- On MAIN CLASS
--   reduce production list(var_decl) -> var_decl list(var_decl)

State 10:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 11:
## Known stack suffix:
## list(var_decl)
## LR(1) items:
program -> list(var_decl) . list(class_def) MAIN BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On CLASS shift to state 12
-- On list(class_def) shift to state 23
-- On class_def shift to state 104
## Reductions:
-- On MAIN
--   reduce production list(class_def) ->

State 12:
## Known stack suffix:
## CLASS
## LR(1) items:
class_def -> CLASS . IDENT BEGIN list(attr_decl) END [ MAIN CLASS ]
## Transitions:
-- On IDENT shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## CLASS IDENT
## LR(1) items:
class_def -> CLASS IDENT . BEGIN list(attr_decl) END [ MAIN CLASS ]
## Transitions:
-- On BEGIN shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## CLASS IDENT BEGIN
## LR(1) items:
class_def -> CLASS IDENT BEGIN . list(attr_decl) END [ MAIN CLASS ]
## Transitions:
-- On ATTR shift to state 15
-- On list(attr_decl) shift to state 19
-- On attr_decl shift to state 21
## Reductions:
-- On END
--   reduce production list(attr_decl) ->

State 15:
## Known stack suffix:
## ATTR
## LR(1) items:
attr_decl -> ATTR . v_type IDENT SEMI [ END ATTR ]
## Transitions:
-- On T_INT shift to state 2
-- On T_BOOL shift to state 3
-- On IDENT shift to state 4
-- On v_type shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## ATTR v_type
## LR(1) items:
attr_decl -> ATTR v_type . IDENT SEMI [ END ATTR ]
## Transitions:
-- On IDENT shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## ATTR v_type IDENT
## LR(1) items:
attr_decl -> ATTR v_type IDENT . SEMI [ END ATTR ]
## Transitions:
-- On SEMI shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## ATTR v_type IDENT SEMI
## LR(1) items:
attr_decl -> ATTR v_type IDENT SEMI . [ END ATTR ]
## Transitions:
## Reductions:
-- On END ATTR
--   reduce production attr_decl -> ATTR v_type IDENT SEMI

State 19:
## Known stack suffix:
## CLASS IDENT BEGIN list(attr_decl)
## LR(1) items:
class_def -> CLASS IDENT BEGIN list(attr_decl) . END [ MAIN CLASS ]
## Transitions:
-- On END shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## CLASS IDENT BEGIN list(attr_decl) END
## LR(1) items:
class_def -> CLASS IDENT BEGIN list(attr_decl) END . [ MAIN CLASS ]
## Transitions:
## Reductions:
-- On MAIN CLASS
--   reduce production class_def -> CLASS IDENT BEGIN list(attr_decl) END

State 21:
## Known stack suffix:
## attr_decl
## LR(1) items:
list(attr_decl) -> attr_decl . list(attr_decl) [ END ]
## Transitions:
-- On ATTR shift to state 15
-- On list(attr_decl) shift to state 22
-- On attr_decl shift to state 21
## Reductions:
-- On END
--   reduce production list(attr_decl) ->

State 22:
## Known stack suffix:
## attr_decl list(attr_decl)
## LR(1) items:
list(attr_decl) -> attr_decl list(attr_decl) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(attr_decl) -> attr_decl list(attr_decl)

State 23:
## Known stack suffix:
## list(var_decl) list(class_def)
## LR(1) items:
program -> list(var_decl) list(class_def) . MAIN BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On MAIN shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN . BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On BEGIN shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN . list(instruction) END EOF [ # ]
## Transitions:
-- On WHILE shift to state 26
-- On SUB shift to state 28
-- On RETURN shift to state 72
-- On PRINT shift to state 75
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IF shift to state 80
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 85
-- On list(instruction) shift to state 101
-- On instruction shift to state 95
-- On expression shift to state 97
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 26:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . LPAR expression RPAR BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On LPAR shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## WHILE LPAR
## LR(1) items:
instruction -> WHILE LPAR . expression RPAR BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 69
## Reductions:

State 28:
## Known stack suffix:
## SUB
## LR(1) items:
unop -> SUB . [ SUB NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On SUB NOT NEW LPAR INT IDENT BOOL
--   reduce production unop -> SUB

State 29:
## Known stack suffix:
## NOT
## LR(1) items:
unop -> NOT . [ SUB NOT NEW LPAR INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On SUB NOT NEW LPAR INT IDENT BOOL
--   reduce production unop -> NOT

State 30:
## Known stack suffix:
## NEW
## LR(1) items:
expression -> NEW . IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On IDENT shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
expression -> NEW IDENT . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD
--   reduce production expression -> NEW IDENT

State 32:
## Known stack suffix:
## LPAR
## LR(1) items:
expression -> LPAR . expression RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 41
## Reductions:

State 33:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD
--   reduce production expression -> INT

State 34:
## Known stack suffix:
## IDENT
## LR(1) items:
mem -> IDENT . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV AND ADD
--   reduce production mem -> IDENT

State 35:
## Known stack suffix:
## BOOL
## LR(1) items:
expression -> BOOL . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD
--   reduce production expression -> BOOL

State 36:
## Known stack suffix:
## unop
## LR(1) items:
expression -> unop . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 38
## Reductions:

State 37:
## Known stack suffix:
## mem
## LR(1) items:
expression -> mem . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD
--   reduce production expression -> mem

State 38:
## Known stack suffix:
## unop expression
## LR(1) items:
expression -> unop expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On DOT shift to state 39
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DIV AND ADD
--   reduce production expression -> unop expression

State 39:
## Known stack suffix:
## expression DOT
## LR(1) items:
mem -> expression DOT . IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV AND ADD ]
## Transitions:
-- On IDENT shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## expression DOT IDENT
## LR(1) items:
mem -> expression DOT IDENT . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV AND ADD
--   reduce production mem -> expression DOT IDENT

State 41:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> LPAR expression . RPAR [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On RPAR shift to state 50
-- On REM shift to state 44
-- On OR shift to state 51
-- On NEQ shift to state 53
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On EQ shift to state 65
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On AND shift to state 67
-- On ADD shift to state 57
## Reductions:

State 42:
## Known stack suffix:
## expression SUB
## LR(1) items:
expression -> expression SUB . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expression SUB expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression SUB expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On REM shift to state 44
-- On MUL shift to state 46
-- On DOT shift to state 39
-- On DIV shift to state 48
## Reductions:
-- On SUB SEMI RPAR OR NEQ LT LE GT GE EQ AND ADD
--   reduce production expression -> expression SUB expression

State 44:
## Known stack suffix:
## expression REM
## LR(1) items:
expression -> expression REM . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## expression REM expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression REM expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On MUL shift to state 46
-- On DOT shift to state 39
-- On DIV shift to state 48
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ LT LE GT GE EQ AND ADD
--   reduce production expression -> expression REM expression

State 46:
## Known stack suffix:
## expression MUL
## LR(1) items:
expression -> expression MUL . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## expression MUL expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression MUL expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On DOT shift to state 39
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DIV AND ADD
--   reduce production expression -> expression MUL expression

State 48:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression DIV expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On DOT shift to state 39
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DIV AND ADD
--   reduce production expression -> expression DIV expression

State 50:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
expression -> LPAR expression RPAR . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD
--   reduce production expression -> LPAR expression RPAR

State 51:
## Known stack suffix:
## expression OR
## LR(1) items:
expression -> expression OR . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## expression OR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression OR expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On REM shift to state 44
-- On NEQ shift to state 53
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On EQ shift to state 65
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On ADD shift to state 57
## Reductions:
-- On SEMI RPAR OR AND
--   reduce production expression -> expression OR expression

State 53:
## Known stack suffix:
## expression NEQ
## LR(1) items:
expression -> expression NEQ . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expression NEQ expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression NEQ expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On REM shift to state 44
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On ADD shift to state 57
## Reductions:
-- On SEMI RPAR OR NEQ EQ AND
--   reduce production expression -> expression NEQ expression

State 55:
## Known stack suffix:
## expression LT
## LR(1) items:
expression -> expression LT . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expression LT expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression LT expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On REM shift to state 44
-- On MUL shift to state 46
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On ADD shift to state 57
## Reductions:
-- On SEMI RPAR OR NEQ LT LE GT GE EQ AND
--   reduce production expression -> expression LT expression

State 57:
## Known stack suffix:
## expression ADD
## LR(1) items:
expression -> expression ADD . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## expression ADD expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression ADD expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On REM shift to state 44
-- On MUL shift to state 46
-- On DOT shift to state 39
-- On DIV shift to state 48
## Reductions:
-- On SUB SEMI RPAR OR NEQ LT LE GT GE EQ AND ADD
--   reduce production expression -> expression ADD expression

State 59:
## Known stack suffix:
## expression LE
## LR(1) items:
expression -> expression LE . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## expression LE expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression LE expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On REM shift to state 44
-- On MUL shift to state 46
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On ADD shift to state 57
## Reductions:
-- On SEMI RPAR OR NEQ LT LE GT GE EQ AND
--   reduce production expression -> expression LE expression

State 61:
## Known stack suffix:
## expression GT
## LR(1) items:
expression -> expression GT . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## expression GT expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression GT expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On REM shift to state 44
-- On MUL shift to state 46
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On ADD shift to state 57
## Reductions:
-- On SEMI RPAR OR NEQ LT LE GT GE EQ AND
--   reduce production expression -> expression GT expression

State 63:
## Known stack suffix:
## expression GE
## LR(1) items:
expression -> expression GE . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## expression GE expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression GE expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On REM shift to state 44
-- On MUL shift to state 46
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On ADD shift to state 57
## Reductions:
-- On SEMI RPAR OR NEQ LT LE GT GE EQ AND
--   reduce production expression -> expression GE expression

State 65:
## Known stack suffix:
## expression EQ
## LR(1) items:
expression -> expression EQ . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## expression EQ expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression EQ expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On REM shift to state 44
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On ADD shift to state 57
## Reductions:
-- On SEMI RPAR OR NEQ EQ AND
--   reduce production expression -> expression EQ expression

State 67:
## Known stack suffix:
## expression AND
## LR(1) items:
expression -> expression AND . expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expression AND expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression AND expression . [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB SEMI RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On REM shift to state 44
-- On OR shift to state 51
-- On NEQ shift to state 53
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On EQ shift to state 65
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On ADD shift to state 57
## Reductions:
-- On SEMI RPAR AND
--   reduce production expression -> expression AND expression

State 69:
## Known stack suffix:
## WHILE LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> WHILE LPAR expression . RPAR BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On RPAR shift to state 70
-- On REM shift to state 44
-- On OR shift to state 51
-- On NEQ shift to state 53
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On EQ shift to state 65
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On AND shift to state 67
-- On ADD shift to state 57
## Reductions:

State 70:
## Known stack suffix:
## WHILE LPAR expression RPAR
## LR(1) items:
instruction -> WHILE LPAR expression RPAR . BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On BEGIN shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN . list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On WHILE shift to state 26
-- On SUB shift to state 28
-- On RETURN shift to state 72
-- On PRINT shift to state 75
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IF shift to state 80
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 85
-- On list(instruction) shift to state 99
-- On instruction shift to state 95
-- On expression shift to state 97
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 72:
## Known stack suffix:
## RETURN
## LR(1) items:
instruction -> RETURN . expression SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## RETURN expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> RETURN expression . SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On SEMI shift to state 74
-- On REM shift to state 44
-- On OR shift to state 51
-- On NEQ shift to state 53
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On EQ shift to state 65
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On AND shift to state 67
-- On ADD shift to state 57
## Reductions:

State 74:
## Known stack suffix:
## RETURN expression SEMI
## LR(1) items:
instruction -> RETURN expression SEMI . [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> RETURN expression SEMI

State 75:
## Known stack suffix:
## PRINT
## LR(1) items:
instruction -> PRINT . LPAR expression RPAR SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On LPAR shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## PRINT LPAR
## LR(1) items:
instruction -> PRINT LPAR . expression RPAR SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## PRINT LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> PRINT LPAR expression . RPAR SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On RPAR shift to state 78
-- On REM shift to state 44
-- On OR shift to state 51
-- On NEQ shift to state 53
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On EQ shift to state 65
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On AND shift to state 67
-- On ADD shift to state 57
## Reductions:

State 78:
## Known stack suffix:
## PRINT LPAR expression RPAR
## LR(1) items:
instruction -> PRINT LPAR expression RPAR . SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On SEMI shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## PRINT LPAR expression RPAR SEMI
## LR(1) items:
instruction -> PRINT LPAR expression RPAR SEMI . [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> PRINT LPAR expression RPAR SEMI

State 80:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On LPAR shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## IF LPAR
## LR(1) items:
instruction -> IF LPAR . expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## IF LPAR expression
## LR(1) items:
expression -> expression . ADD expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> IF LPAR expression . RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On RPAR shift to state 83
-- On REM shift to state 44
-- On OR shift to state 51
-- On NEQ shift to state 53
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On EQ shift to state 65
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On AND shift to state 67
-- On ADD shift to state 57
## Reductions:

State 83:
## Known stack suffix:
## IF LPAR expression RPAR
## LR(1) items:
instruction -> IF LPAR expression RPAR . BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On BEGIN shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN . list(instruction) END ELSE BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On WHILE shift to state 26
-- On SUB shift to state 28
-- On RETURN shift to state 72
-- On PRINT shift to state 75
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IF shift to state 80
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 85
-- On list(instruction) shift to state 89
-- On instruction shift to state 95
-- On expression shift to state 97
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 85:
## Known stack suffix:
## mem
## LR(1) items:
expression -> mem . [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> mem . EQUAL expression SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On EQUAL shift to state 86
## Reductions:
-- On SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD
--   reduce production expression -> mem

State 86:
## Known stack suffix:
## mem EQUAL
## LR(1) items:
instruction -> mem EQUAL . expression SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On SUB shift to state 28
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 37
-- On expression shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## mem EQUAL expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> mem EQUAL expression . SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On SEMI shift to state 88
-- On REM shift to state 44
-- On OR shift to state 51
-- On NEQ shift to state 53
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On EQ shift to state 65
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On AND shift to state 67
-- On ADD shift to state 57
## Reductions:

State 88:
## Known stack suffix:
## mem EQUAL expression SEMI
## LR(1) items:
instruction -> mem EQUAL expression SEMI . [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> mem EQUAL expression SEMI

State 89:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) . END ELSE BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On END shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END . ELSE BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On ELSE shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE . BEGIN list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On BEGIN shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN . list(instruction) END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On WHILE shift to state 26
-- On SUB shift to state 28
-- On RETURN shift to state 72
-- On PRINT shift to state 75
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IF shift to state 80
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 85
-- On list(instruction) shift to state 93
-- On instruction shift to state 95
-- On expression shift to state 97
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 93:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) . END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On END shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END . [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END

State 95:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ END ]
## Transitions:
-- On WHILE shift to state 26
-- On SUB shift to state 28
-- On RETURN shift to state 72
-- On PRINT shift to state 75
-- On NOT shift to state 29
-- On NEW shift to state 30
-- On LPAR shift to state 32
-- On INT shift to state 33
-- On IF shift to state 80
-- On IDENT shift to state 34
-- On BOOL shift to state 35
-- On unop shift to state 36
-- On mem shift to state 85
-- On list(instruction) shift to state 96
-- On instruction shift to state 95
-- On expression shift to state 97
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 96:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(instruction) -> instruction list(instruction)

State 97:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . ADD expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . SUB expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . MUL expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DIV expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . REM expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . EQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . NEQ expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . LE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GT expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . GE expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . AND expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . OR expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> expression . SEMI [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
mem -> expression . DOT IDENT [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQUAL EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 42
-- On SEMI shift to state 98
-- On REM shift to state 44
-- On OR shift to state 51
-- On NEQ shift to state 53
-- On MUL shift to state 46
-- On LT shift to state 55
-- On LE shift to state 59
-- On GT shift to state 61
-- On GE shift to state 63
-- On EQ shift to state 65
-- On DOT shift to state 39
-- On DIV shift to state 48
-- On AND shift to state 67
-- On ADD shift to state 57
## Reductions:

State 98:
## Known stack suffix:
## expression SEMI
## LR(1) items:
instruction -> expression SEMI . [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> expression SEMI

State 99:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) . END [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
-- On END shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END . [ WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL ]
## Transitions:
## Reductions:
-- On WHILE SUB RETURN PRINT NOT NEW LPAR INT IF IDENT END BOOL
--   reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END

State 101:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instruction)
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) . END EOF [ # ]
## Transitions:
-- On END shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instruction) END
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) END . EOF [ # ]
## Transitions:
-- On EOF shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instruction) END EOF
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) END EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) END EOF

State 104:
## Known stack suffix:
## class_def
## LR(1) items:
list(class_def) -> class_def . list(class_def) [ MAIN ]
## Transitions:
-- On CLASS shift to state 12
-- On list(class_def) shift to state 105
-- On class_def shift to state 104
## Reductions:
-- On MAIN
--   reduce production list(class_def) ->

State 105:
## Known stack suffix:
## class_def list(class_def)
## LR(1) items:
list(class_def) -> class_def list(class_def) . [ MAIN ]
## Transitions:
## Reductions:
-- On MAIN
--   reduce production list(class_def) -> class_def list(class_def)

