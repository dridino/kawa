# 1 "kawalexer.mll"
 

  open Lexing
  open Kawaparser

  exception Error of string

  let keyword_or_ident =
  let h = Hashtbl.create 17 in
  List.iter (fun (s, k) -> Hashtbl.add h s k)
    [ "print",      PRINT;
      "main",       MAIN;
      "false",      BOOL(false);
      "true",       BOOL(true);
      "var",        VAR;
      "int",        T_INT;
      "bool",       T_BOOL;
      "if",         IF;
      "else",       ELSE;
      "while",      WHILE;
      "return",     RETURN;
      "class",      CLASS;
      "attribute",  ATTR;
      "new",        NEW;
    ] ;
  fun s ->
    try  Hashtbl.find h s
    with Not_found -> IDENT(s)
        

# 33 "kawalexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\227\255\228\255\229\255\002\000\001\000\002\000\003\000\
    \004\000\005\000\240\255\242\255\244\255\245\255\246\255\247\255\
    \248\255\249\255\079\000\019\000\029\000\045\000\002\000\255\255\
    \252\255\002\000\253\255\239\255\238\255\236\255\234\255\233\255\
    \232\255\016\000\253\255\254\255\041\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\027\000\027\000\020\000\018\000\
    \024\000\025\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\005\000\004\000\012\000\014\000\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\035\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\023\000\022\000\026\000\022\000\000\000\022\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\008\000\022\000\000\000\000\000\010\000\005\000\031\000\
    \016\000\015\000\011\000\012\000\000\000\020\000\003\000\021\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\036\000\017\000\007\000\009\000\006\000\030\000\
    \029\000\028\000\027\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\024\000\
    \037\000\000\000\000\000\000\000\025\000\000\000\000\000\018\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\014\000\004\000\013\000\032\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\018\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\022\000\025\000\000\000\255\255\022\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\022\000\255\255\255\255\000\000\000\000\005\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\033\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\008\000\009\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\021\000\
    \036\000\255\255\255\255\255\255\021\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\018\000\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \033\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 38 "kawalexer.mll"
                      ( new_line lexbuf; token lexbuf )
# 162 "kawalexer.ml"

  | 1 ->
# 39 "kawalexer.mll"
                      ( token lexbuf )
# 167 "kawalexer.ml"

  | 2 ->
# 41 "kawalexer.mll"
                         ( new_line lexbuf; token lexbuf )
# 172 "kawalexer.ml"

  | 3 ->
# 42 "kawalexer.mll"
                         ( comment lexbuf; token lexbuf )
# 177 "kawalexer.ml"

  | 4 ->
let
# 44 "kawalexer.mll"
              n
# 183 "kawalexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 44 "kawalexer.mll"
                 ( INT(int_of_string n) )
# 187 "kawalexer.ml"

  | 5 ->
let
# 45 "kawalexer.mll"
             id
# 193 "kawalexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "kawalexer.mll"
                 ( keyword_or_ident id )
# 197 "kawalexer.ml"

  | 6 ->
# 47 "kawalexer.mll"
         ( SEMI )
# 202 "kawalexer.ml"

  | 7 ->
# 48 "kawalexer.mll"
         ( LPAR )
# 207 "kawalexer.ml"

  | 8 ->
# 49 "kawalexer.mll"
         ( RPAR )
# 212 "kawalexer.ml"

  | 9 ->
# 50 "kawalexer.mll"
         ( BEGIN )
# 217 "kawalexer.ml"

  | 10 ->
# 51 "kawalexer.mll"
         ( END )
# 222 "kawalexer.ml"

  | 11 ->
# 53 "kawalexer.mll"
        ( ADD )
# 227 "kawalexer.ml"

  | 12 ->
# 54 "kawalexer.mll"
        ( SUB )
# 232 "kawalexer.ml"

  | 13 ->
# 55 "kawalexer.mll"
        ( MUL )
# 237 "kawalexer.ml"

  | 14 ->
# 56 "kawalexer.mll"
        ( DIV )
# 242 "kawalexer.ml"

  | 15 ->
# 57 "kawalexer.mll"
        ( REM )
# 247 "kawalexer.ml"

  | 16 ->
# 59 "kawalexer.mll"
         ( EQ )
# 252 "kawalexer.ml"

  | 17 ->
# 60 "kawalexer.mll"
         ( NEQ )
# 257 "kawalexer.ml"

  | 18 ->
# 61 "kawalexer.mll"
         ( LT )
# 262 "kawalexer.ml"

  | 19 ->
# 62 "kawalexer.mll"
         ( LE )
# 267 "kawalexer.ml"

  | 20 ->
# 63 "kawalexer.mll"
         ( GT )
# 272 "kawalexer.ml"

  | 21 ->
# 64 "kawalexer.mll"
         ( GE )
# 277 "kawalexer.ml"

  | 22 ->
# 65 "kawalexer.mll"
         ( AND )
# 282 "kawalexer.ml"

  | 23 ->
# 66 "kawalexer.mll"
         ( OR )
# 287 "kawalexer.ml"

  | 24 ->
# 67 "kawalexer.mll"
        ( NOT )
# 292 "kawalexer.ml"

  | 25 ->
# 69 "kawalexer.mll"
        ( EQUAL )
# 297 "kawalexer.ml"

  | 26 ->
# 71 "kawalexer.mll"
        ( DOT )
# 302 "kawalexer.ml"

  | 27 ->
# 73 "kawalexer.mll"
         ( raise (Error ("unknown character : " ^ lexeme lexbuf)) )
# 307 "kawalexer.ml"

  | 28 ->
# 74 "kawalexer.mll"
         ( EOF )
# 312 "kawalexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 33
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 77 "kawalexer.mll"
         ( () )
# 324 "kawalexer.ml"

  | 1 ->
# 78 "kawalexer.mll"
         ( comment lexbuf )
# 329 "kawalexer.ml"

  | 2 ->
# 79 "kawalexer.mll"
         ( raise (Error "unterminated comment") )
# 334 "kawalexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

